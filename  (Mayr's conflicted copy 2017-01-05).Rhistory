ysr_vwc <- read_tsv("http://anthony.darrouzet-nardi.net/data/tdr.txt")
ysr_vwc$tdr
ysr_vwc$tdr %>%  sort
ysr_vwc <- read_tsv("http://anthony.darrouzet-nardi.net/data/tdr.txt")
ysr_vwc$tdr %>%  sort
ysr_vwc <- read_tsv("http://anthony.darrouzet-nardi.net/data/tdr.txt")
vwc.te <- treateffect(ysr_vwc, tdr ~ interaction(treatment, position) | date + depth)
warnings()
ysr_vwc
source('C:/Dropbox/Projects/treatment effect package/gathering data for treateffect examples.R', echo=TRUE)
ysr_vwc <- read_tsv("http://anthony.darrouzet-nardi.net/data/tdr.txt") %>%
mutate(treatment = ordered(treatment))
ysr_vwc
ysr_vwc$treatment
ysr_vwc <- read_tsv("http://anthony.darrouzet-nardi.net/data/tdr.txt") %>%
mutate(treatment = ordered(treatment, levels = c("s+", "s-")))
ysr_vwc$treatment
ysr_vwc %>%  filter(position = "u") %>%
treateffect(tdr ~ interaction(treatment, position) | date + depth)
ysr_vwc %>%  filter(position == "u") %>%
treateffect(tdr ~ interaction(treatment, position) | date + depth)
ysr_vwc %>%  filter(position == "u") %>%
treateffect(tdr ~ treatment | date + depth)
ysr_vwc %>%
filter(position == "u") %>%
treateffect(tdr ~ treatment | date + depth) %>%
plot
ysr_vwc %>%
filter(position == "a") %>%
treateffect(tdr ~ treatment | date + depth) %>%
plot
View(ysr_vwc)
ysr_vwc %>%
mutate(treatment = interaction(treatment, position))
ysr_vwc %>%
mutate(treatment = interaction(treatment, position)) %>%
treateffect(tdr ~ treatment | date + depth) %>%
plot
plot(tst1.te)
tst1.te
library(treateffect)
library(knitr)
smc <- c("black", "forestgreen", "orange", "red")
smcd <- c("forestgreen", "orange", "red")
set.seed(123)
#proj_dir <- "https://raw.github.com/anthonydn/snowmelt_early_season_N/master/data/"
proj_dir <- "C:/Dropbox/Projects/Snowmelt/Papers/2 & 3. Nutrients/snowmelt_early_season_N/data/"
theme_te()
rcsv <- function(x) read.csv(paste(proj_dir, x, sep = ''), string = F)
cores <- rcsv("cores.csv") %>%
mutate(treatment = ordered(treatment, levels = c("C.N", "A.N", "C.O", "A.O")))
devtools::install_github("anthonydn/treateffect@bfaf6ba")
treateffect
library(treateffect)
bootdiff
library(treateffect)
library(knitr)
smc <- c("black", "forestgreen", "orange", "red")
smcd <- c("forestgreen", "orange", "red")
set.seed(123)
proj_dir <- "https://raw.github.com/anthonydn/snowmelt_belowground/master/data/"
theme_te()
rcsv <- function(x) read.csv(paste(proj_dir, x, sep = ''), string = F)
ml <- rcsv("soilporewater.csv") %>%
mutate(treatment = ordered(treatment, levels = c("C.N", "A.N", "C.O", "A.O"))) %>%
filter(suspicious != "yes")
ml.season <- treateffect(ml, labile ~ treatment | year + tussock,
subsample = "doy", block = "block", subset = n > 10, comp_function = bootdiff)
plot(ml.season, treatcol = smc, points = TRUE)
library(treateffect)
bootdiff
ml.season <- treateffect(ml, labile ~ treatment | year + tussock,
subsample = "doy", block = "block", subset = n > 10, comp_function = bootdiff)
ml.season <- treateffect(ml, labile ~ treatment | year + tussock,
#subsample = "doy",
block = "block", subset = n > 10, comp_function = bootdiff)
ml.season <- treateffect(ml, labile ~ treatment | year + tussock,
#subsample = "doy",
block = "block", #subset = n > 10,
comp_function = bootdiff)
treateffect(ml, labile ~ treatment | year + tussock)
treateffect(ml, labile ~ treatment | year + tussock, block == "block")
names(ml)
treateffect(ml, labile ~ treatment | year + tussock, block = "block")
treateffect(ml, labile ~ treatment | year + tussock, subset = "doy")
treateffect(ml, labile ~ treatment | year + tussock, subsample = "doy")
treateffect(ml, labile ~ treatment | year + tussock)
treatment
treateffect
data = ml
formula = labile ~ treatment | year + tussock
subsample = "doy"
block = "block"
control = NULL
times = NULL
pool = NULL
summary_functions = c("mean", "se", "CI68")
comp_groups = mcc
comp_function = welchCI
extract = NULL
conf.int = 0.95
subset = NULL
data = ml
formula = labile ~ treatment | year + tussock
subsample = "doy"
block = "block"
control = NULL
times = NULL
pool = NULL
summary_functions = c("mean", "se", "CI68")
comp_groups = mcc
comp_function = welchCI
extract = NULL
conf.int = 0.95
subset = NULL
lpf <- lattice:::latticeParseFormula(formula, data, multiple = TRUE)
if ("groups" %in% names(lpf)) r <- levels(lpf$groups) else r <- lpf$left.name
ddl <- list()
if (length(r) == 1) ddl$variable <- rep(r, dim(data)[1])
if (length(r)>1) ddl$variable <- lpf$groups
if (!is.null(lpf$condition)) ddl <- c(ddl, lapply(lpf$condition, as.factor))
if (!is.null(times)) ddl[[times]] <- rep(data[[times]], length(r))
if (!is.null(pool)) ddl[[pool]] <- rep(data[[pool]], length(r))
if (!is.null(block)) ddl[[block]] <- rep(data[[block]], length(r))
ddl[[lpf$right.name]] <- lpf$right
ddl$response <- lpf$left
ddf <- lapply(ddl, data.frame) %>% bind_cols
names(ddf) <- names(ddl)
if (!is.null(subsample)) ddf <- ddf %>%
group_by_(.dots = setdiff(names(ddf), c("response"))) %>%
summarise(n = n(), response = mean(response, na.rm = T))
subset <- eval(substitute(subset), ddf)
if (!is.null(subset)) ddf <- ddf[subset,]
if (class(ddf[[lpf$right.name]])[1] != "ordered")
warning("treatment is not an ordered factor.") #this was not triggering when I sent a character vector in as the treatment variable. needs to warn or else you get a cryptic error from the define_comparisons function
d <- list(response = r, treatment = lpf$right.name,
times = times, subsample = subsample, pool = pool, block = block)
if (!is.null(lpf$condition)) d$panel <- names(lpf$condition)
d$levels <- levels(lpf$right)
if (is.null(control)) d$control <- levels(lpf$right)[1] else
d$control <- control
d$basic_formula <- formula(paste("response ~ ", d$treatment))
d$conf.int <- conf.int
d$comp_function <- comp_function
d$extract <- extract
#if (length(r) > 1) design$variable <- "variable"
treatment_summaries <- ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response)) %>%
summarise_all(c("length", summary_functions)) %>%
rename(n = length) #i believe this is problematic. run it on the "subsampled" labile N data (DO THIS NEXT#########!!!!!!!!!!!!!!!!!!!!!)
ddf
ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol))
ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response))
ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response)) %>%
summarise_all(c("length", summary_functions))
ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response)) %>%
summarise_all(c(length, summary_functions))
treatment_summaries <- ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response))
treatment_summaries
summarise_all(treatment_summaries, summary_functions)
summary_functions
c("length", summary_functions)
summarise_all(treatment_summaries, length)
length
mean
se
CI68
?summarise_all
d$block
treatment_summaries <- ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response)) %>%
select(-d$block, -n) %>%
summarise_all(c("length", summary_functions)) %>%
rename(n = length) #the problem is that summarise_all does ALL non-grouping columns, which includes block and "n" in the case of a subsample
?select
ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response))
ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response)) %>%
select(-c(d$block, "n"))
(d$block, "n")
c(d$block, "n")
ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response)) %>%
select_(.dots = -c(d$block, "n"))
c(d$block, "n")
ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response)) %>%
select(-one.of(d$block, "n"))
ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response)) %>%
select(-one_of(d$block, "n"))
treatment_summaries <- ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response)) %>%
select(-one_of(d$block, "n")) %>%
summarise_all(c("length", summary_functions)) %>%
rename(n = length) #the problem is that summarise_all does ALL non-grouping columns, which includes block and "n" in the case of a subsample. so we have to figure out how not to pass those
treatment_summaries
library(treateffect)
set.seed(100)
tst1 <- data.frame(response = c(rnorm(5), rnorm(5) + 2),
treatment = ordered(rep(c("control", "treatment"), ea = 5)),
block = factor(rep(1:5,2)))
tst1.te <- treateffect(tst1, response~treatment, comp_function = bootdiff)
tst1.te
plot(tst1.te)
library(treateffect)
tst1.te <- treateffect(tst1, response~treatment, comp_function = bootdiff)
?suppressWarnings
library(treateffect)
tst1.te <- treateffect(tst1, response~treatment, comp_function = bootdiff)
library(treateffect)
tst1.te <- treateffect(tst1, response~treatment, comp_function = bootdiff)
tst1.te
plot(tst1.te)
24*130
10/8.87
cen_pm <- function(a,b, units, digits = 2) paste0(round(a, digits = digits),
" \u00b1 ", round(b, digits = digits),",", units)
cen_pm(9.234234234, 0.2342326)
cen_pm(9.234234234, 0.2342326, units = "%")
cen_pm <- function(a,b, units, digits = 2) paste0(round(a, digits = digits),
" \u00b1 ", round(b, digits = digits), units)
cen_pm(9.234234234, 0.2342326, units = "%")
cen_pm(9.234234234, 0.2342326, units = " %")
summex <- function(x, ..., units, digits = 2, cen = "mean", pm = "se") {
x$treatment_summaries %>%
filter_(.dots = lazyeval::lazy_dots(...))
cen_pm(x[cen], x[pm], units = units, digits = digits)
}
npool.te %>% summex(variable == "labile", tussock == "T", snow == "A", doy == 148)
library(treateffect)
npool.te %>% summex(variable == "labile", tussock == "T", snow == "A", doy == 148)
library(treateffect)
treateffect::compex_fracdiff
jorn15 <- readxl::read_excel("C:/Dropbox/Projects/Collaborative/Jornada Summer 2015/Jornada Summer 2015 Summary Data.xlsx", 1) %>%
mutate(Type = ordered(Type), doy = `Day of Year`) %>%
rename(plot_num = `Plot Number`)
remove0 <- function(df) {m <- as.matrix(df) ; m[m<0] <- 0 ; data.frame(m)}
rh <- function(x, p = 0.9999) {x[x > hotspots::hotspots(x, p)$positive.cut] <- NA ;x} #remove_hotspots
jorn15[7:20] <- remove0(jorn15[7:20])
b <- mutate(jorn15, mbn = rh(MBN), mbc = rh(MBC), AGLUC = rh(AGLUC), no3 = rh(no3)) #don't forget I eliminated some outliers for plotting here so we can see the trends
formula = b, mbc + mbn + nh4 + no3 + po4 +
BGLUC + NAG + CELLOBIO + XYLO + AGLUC ~ Type
data = b
formula = b, mbc + mbn + nh4 + no3 + po4 +
BGLUC + NAG + CELLOBIO + XYLO + AGLUC ~ Type
data = b
formula = mbc + mbn + nh4 + no3 + po4 +
BGLUC + NAG + CELLOBIO + XYLO + AGLUC ~ Type
subsample = NULL
block = NULL
control = NULL
times = "doy"
pool = NULL
summary_functions = c("mean", "se", "CI68")
comp_groups = allcomps
comp_function = welchCI
extract = NULL
conf.int = 0.95
subset = NULL
lpf <- lattice:::latticeParseFormula(formula, data, multiple = TRUE)
if ("groups" %in% names(lpf)) r <- levels(lpf$groups) else r <- lpf$left.name
ddl <- list()
if (length(r) == 1) ddl$variable <- rep(r, dim(data)[1])
if (length(r)>1) ddl$variable <- lpf$groups
if (!is.null(lpf$condition)) ddl <- c(ddl, lapply(lpf$condition, as.factor))
if (!is.null(times)) ddl[[times]] <- rep(data[[times]], length(r))
if (!is.null(pool)) ddl[[pool]] <- rep(data[[pool]], length(r))
if (!is.null(block)) ddl[[block]] <- rep(data[[block]], length(r))
ddl[[lpf$right.name]] <- lpf$right
ddl$response <- lpf$left
ddf <- lapply(ddl, data.frame) %>% bind_cols
names(ddf) <- names(ddl)
ddf
lpf
b$Type
d <- list(response = r, treatment = lpf$right.name,
times = times, subsample = subsample, pool = pool, block = block)
d
if (!is.null(lpf$condition)) d$panel <- names(lpf$condition)
d$levels <- levels(lpf$right)
if (is.null(control)) d$control <- levels(lpf$right)[1] else
d$control <- control
d$basic_formula <- formula(paste("response ~ ", d$treatment))
d$conf.int <- conf.int
d$comp_function <- comp_function
d$extract <- extract
#if (length(r) > 1) design$variable <- "variable"
d
treatment_summaries <- ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times, d$treatment),
as.symbol)) %>%
filter(!is.na(response)) %>%
select(-suppressWarnings(one_of(d$block, "n"))) %>% #the problem is that summarise_all does ALL non-grouping columns, which includes block and "n" in the case of a subsample. (may need these at some point we will see)
summarise_all(c("length", summary_functions)) %>%
rename(n = length)
treatment_summaries
if (!is.null(comp_groups) & !is.null(d$levels)) {
d$comparisons <- comp_groups(d) %>% define_comparisons
d$FUN <- function(x, ...) try(d$comp_function$FUN(x, ...), silent = TRUE)
if (is.null(d$extract)) d$extract <- d$comp_function$default_extract else
d$extract <- d$extract
comparisons <- ddf %>%
group_by_(.dots = lapply(c("variable", d$panel, d$times), as.symbol)) %>%
do(mod = pergroup(., d = d)) %>%
expand_tbl_matrix(., d = d) %>%
uldf
} else comparisons <- NULL
output <- list(source_data = data, design = d, data = tbl_df(ddf),
treatment_summaries = treatment_summaries, comparisons = comparisons)
class(output) <- "te"
output
library(treateffect)
load("C:/Dropbox/Projects/Dryland C/DOE Autochambers/Data/acimp06071314.Rdata")
library(treateffect)
library(lubridate)
theme_te()
doec <- c("black","red","blue","purple")
acimp_all <- full_join(acimp0607, full_join(acimp13, acimp14)) %>%
select(-contains("before"), -contains("after"))
#check what dates we have
acimp_all %>% group_by(year(datetime)) %>% summarise(min(datetime), max(datetime))
###7 month summaries
NSE_7mo <-
acimp_all %>%
filter(yday(datetime) > 49, yday(datetime) < 263) %>%
mutate(year = year(datetime)) %>%
select(year, C_B1, C_B2, C_B3, C_B4, C_B5, L_B1, L_B2, L_B3, L_B4, L_B5,
W_B1, W_B2, W_B3, W_B4, W_B5, LW_B1, LW_B2, LW_B3, LW_B4, LW_B5) %>%
gather(tb, flux, -year) %>%
group_by(year, tb) %>%
summarise(NSE_7mo = sum(flux) * 3600 * 12 / 1e6) %>% #umol m-2 s-1 to g C m-2
separate(tb, c("treatment", "block")) %>%
mutate(treatment = ordered(treatment, c("C", "L", "W", "LW")))
NSE_7mo.te <- treateffect(NSE_7mo, NSE_7mo ~ treatment | year, comp_function = bootdiff)
plot(NSE_7mo.te, treatcol = doec)
library(treateffect)
NSE_7mo.te <- treateffect(NSE_7mo, NSE_7mo ~ treatment | year, comp_function = bootdiff)
plot(NSE_7mo.te, treatcol = doec)
4040
devtools::use_data(NSE_7mo)
install.packages("devtools")
devtools::use_data(NSE_7mo)
?group_indices
group_indices(mtcars, cyl)
?case_when
library(readr)
h <- read_delim("clipboard")
h <- read_tsv(("clipboard"))
h <- read_tsv("clipboard")
h <- read_tsv("clipboard")
h <- read.delim("clipboard")
h
head(h)
ggplot(h, aes(over5Kpick, sub2Kpick)) +
geom_text(hero)
library(ggplot2)
ggplot(h, aes(over5Kpick, sub2Kpick)) +
geom_text(hero)
ggplot(h, aes(over5Kpick, sub2Kpick, label = hero)) +
geom_text()
ggplot(h, aes(over5Kpick, K23pick, label = hero)) +
geom_text()
rep("black", length(h))
rep("black", length(h$hero))
hc <- rep("black", length(h$hero))
hc[which(h$hero) == "Lich"]
hc[which(h$hero, "Lich")]
hc[which(h$hero == "Lich")]
hc[which(h$hero == "Lich")] <- "red"
hc
hc <- rep("black", length(h$hero))
hc[which(h$hero == "Lich")] <- "red"
ggplot(h, aes(over5Kpick, K23pick, label = hero, col = hc)) + geom_text()
sort(h, hc)
arrange(h, hc)
library(dplyr)
arrange(h, hc)
ggplot(aes(over5Kpick, K23pick, label = hero)) + geom_text(col = hc)
hc
ggplot(aes(over5Kpick, K23pick, label = hero)) + geom_text(col = hc)
?geom_text
ggplot(aes(over5Kpick, K23pick, label = hero, fill = hc)) + geom_text()
arrange(h, hc) %>%
ggplot(aes(over5Kpick, K23pick, label = hero, fill = hc)) + geom_text()
arrange(h, hc) %>%
ggplot(aes(over5Kpick, K23pick, label = hero, col = hc)) + geom_text()
h$hc <- rep("black", length(h$hero))
h$hc[which(h$hero == "Lich")] <- "red"
arrange(h, hc) %>%
ggplot(aes(over5Kpick, K23pick, label = hero, col = hc)) + geom_text()
ggplot(aes(over5Kpick, K23pick, label = hero, col = hc)) + geom_text() +
scale_color_manual(hc)
arrange(h, hc) %>%
ggplot(aes(over5Kpick, K23pick, label = hero, col = hc)) + geom_text() +
scale_color_manual(hc)
ggplot(aes(over5Kpick, K23pick, label = hero, col = hc)) + geom_text() +
scale_color_manual(c("red", "black"))
arrange(h, hc) %>%
ggplot(aes(over5Kpick, K23pick, label = hero, col = hc)) + geom_text() +
scale_color_manual(c("red", "black"))
?scale_color_manual
ggplot(aes(over5Kpick, K23pick, label = hero, col = hc)) +
geom_text() +
scale_color_manual(values = c("red", "black"))
arrange(h, hc) %>%
ggplot(aes(over5Kpick, K23pick, label = hero, col = hc)) +
geom_text() +
scale_color_manual(values = c("red", "black"))
arrange(h, hc) %>%
ggplot(aes(over5Kpick, K23pick, label = hero, col = factor(h$hero == "Lich"))) +
geom_text() +
scale_color_manual(values = c("red", "black"))
ggplot(h, aes(over5Kpick, K23pick, label = hero, col = factor(h$hero == "Lich"))) +
geom_text() +
scale_color_manual(values = c("red", "black"))
ggplot(h, aes(over5Kpick, K23pick, label = hero, col = factor(h$hero == "Lich"))) +
geom_text() +
scale_color_manual(values = c("black", "red"))
?geom_text
ggplot(h, aes(over5Kpick, K23pick, label = hero, col = factor(h$hero == "Lich"))) +
geom_text(size = 1) +
scale_color_manual(values = c("black", "red"))
ggplot(h, aes(over5Kpick, K23pick, label = hero, col = factor(h$hero == "Lich"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red"))
ggplot(aes(over5Kpick, K23pick, label = hero, col = factor(h$hero == "Lich"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red"))
ggplot(h, aes(over5Kpick, K23pick, label = hero, col = factor(h$hero == "Lich"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red"))
ggplot(h, aes(over5Kpick, K23pick, label = hero, col = factor(h$hero == "Abaddon"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red"))
ggplot(h, aes(sub2Kpick, K23pick, label = hero, col = factor(h$hero == "Abaddon"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red"))
ggplot(h, aes(K23pick, K34pick, label = hero, col = factor(h$hero == "Abaddon"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red"))
ggplot(h, aes(K34pick, K45pick, label = hero, col = factor(h$hero == "Abaddon"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red"))
names(h)
ggplot(h, aes(K45pick, over5Kpick, label = hero, col = factor(h$hero == "Abaddon"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red"))
ggplot(h, aes(sub2Kpick, over5Kpick, label = hero, col = factor(h$hero == "Abaddon"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red"))
?geom_abline
ggplot(h, aes(sub2Kpick, over5Kpick, label = hero, col = factor(h$hero == "Abaddon"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red")) +
geom_abline(i = 0, s = 1)
ggplot(h, aes(sub2Kpick, over5Kpick, label = hero, col = factor(h$hero == "Abaddon"))) +
geom_text(size = 2) +
scale_color_manual(values = c("black", "red")) +
geom_abline(intercept = 0, slope = 1)
h$diff <- h$over5Kpick - h$sub2Kpick
?dotplot
library(lattice)
?dotplot
dotplot(h$diff, h$hero)
dotplot(h$diff ~ h$hero)
dotplot(h$hero, h$diff)
h$diff
dotplot(h$diff)
?dotplot
dotplot(h$hero, h$diff)
class(h$diff)
dotplot(h$hero ~ h$diff)
sort(h, h$diff)
arrange(h, diff)
dotplot(hero ~ diff, data = arrange(h, diff))
dotplot(reorder(rownames(h), hero) ~ diff, data = h)
reorder(rownames(h), hero)
reorder(rownames(h), h$hero)
dotplot(factor(h$hero,reorder(rownames(h), h$hero)) ~ diff, data = h)
library(treateffect)
