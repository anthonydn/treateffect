#create design list object defining the experimental design
d <- list(response = re, treatment = tr, times = times,
block = block)
if (!is.null(lpf$condition)) d$panel <- names(lpf$condition)
d$levels <- lapply(tr, function(j) levels(factor(ddl$x[ddl$treatment == j])))
names(d$levels) <- tr
if (is.null(control)) d$control <- lapply(d$levels, `[[`, 1) else #maybe a warning if you specify a level that's not in the treatment variable
d$control <- as.list(control)
names(d$control) <- tr
d$summary_functions <- summary_functions
d$comp_function <- comp_function
d$comp_function_name <- deparse(substitute(comp_function))
d$contrasts <- deparse(substitute(comp_groups))
if (any(unlist(lapply(d$levels, function(x) length(x) == 1)))) {
warning("no comparisons done because only one level in treatment")
comparisons <- NULL
} else if (!is.null(comp_groups) & !is.null(d$levels)) {
d$comparisons <-
lapply(tr, function(x) define_comparisons(comp_groups(d$levels[[x]],
d$control[[x]]))) %>% unlist(., recursive = FALSE) #a control does not always need to be specified.
d$FUN <- function(x, ...) tryCatch(d$comp_function(x, ...), error =
function(x) data.frame(effect_size = NA, lwr = NA, upr = NA))
d$conf.int <- conf.int
d$pool_variance <- pool_variance
} else comparisons <- NULL
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
g <- c("response", d$panel, d$times)
cmat <- unique(d_f[g])
h <- names(d$comparisons)
cmat <- data.frame(cmat[rep(row.names(cmat),
ea = length(h)), ,drop = FALSE], comparison = ordered(h, levels = h))
#split
fnames <- setdiff(g, d$pool_variance)
ffac <- tidyr::unite(d_f[rev(fnames)])[[1]]
ffac <- factor(ffac, levels = unique(ffac))
d_f_split_list <- split(d_f, ffac)
if (!any(d$treatment %in% d$pool_variance))
diffs <- lapply(d_f_split_list, pergroup, d) %>% bind_rows else
diffs <- lapply(d_f_split_list, d$comp_function, d) %>% bind_rows
diffs
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
dfcf= d_f_split_list[[1]]
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
dfcf
cmat
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint
str(dfcf)
d$levels
ordered(dfcf$x)
dfcf$x <- ordered(dfcf$x)
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint
str(dfcf)
co <- "revpairwise"
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
?pairwise.emmc
if (length(gvars) > 0) contrasts <- as.formula(paste(co, "~x|",
paste(gvars, collapse = "+"))) else
contrasts <- as.formula(paste(co, "~x"))
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
co <- "trt.vs.ctrl"
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
ex1 <- tedatasim(n = 10, response = 1, levels = 3, time = 1,
groups = 1, subsample = 1, block = FALSE)
data = ex1
formula = resp_var1 ~ pred_var1
times = NULL
block = NULL
pool_variance = NULL
average_subsamples = FALSE
summary_functions = c("mean", "se", "CI68")
comp_groups = allcomps
control = NULL
comp_function = parametricCI
conf.int = 0.95
##create a data frame with a standardized form
lpf <- lattice:::latticeParseFormula(formula, data, multiple = TRUE)
re <- unlist(strsplit(lpf$left.name, ' [+] '))
tr <- unlist(strsplit(lpf$right.name, ' [+] '))
N = length(lpf$left) / length(tr) / length(re)
ddl <- list(response = rep(re, length(tr), ea = N),
treatment = rep(tr, ea = N * length(re)))
if (!is.null(lpf$condition)) ddl <- c(ddl, lapply(lpf$condition, as.factor))
if (!is.null(times)) ddl[[times]] <- rep(data[[times]], length(re) * length(tr))
if (!is.null(block)) ddl[[block]] <- rep(data[[block]], length(re) * length(tr))
ddl$y <- lpf$left
ddl$x <- if(!is.factor(lpf$right)) factor(lpf$right) else lpf$right
d_f <- data.frame(ddl)
#averaging across subsamples
if (average_subsamples) d_f <- d_f %>%
group_by_at(setdiff(names(d_f), c("y"))) %>%
summarise(subsamples = n(), y = mean(y, na.rm = T)) %>%
ungroup
#create design list object defining the experimental design
d <- list(response = re, treatment = tr, times = times,
block = block)
if (!is.null(lpf$condition)) d$panel <- names(lpf$condition)
d$levels <- lapply(tr, function(j) levels(factor(ddl$x[ddl$treatment == j])))
names(d$levels) <- tr
if (is.null(control)) d$control <- lapply(d$levels, `[[`, 1) else #maybe a warning if you specify a level that's not in the treatment variable
d$control <- as.list(control)
names(d$control) <- tr
d$summary_functions <- summary_functions
d$comp_function <- comp_function
d$comp_function_name <- deparse(substitute(comp_function))
d$contrasts <- deparse(substitute(comp_groups))
if (any(unlist(lapply(d$levels, function(x) length(x) == 1)))) {
warning("no comparisons done because only one level in treatment")
comparisons <- NULL
} else if (!is.null(comp_groups) & !is.null(d$levels)) {
d$comparisons <-
lapply(tr, function(x) define_comparisons(comp_groups(d$levels[[x]],
d$control[[x]]))) %>% unlist(., recursive = FALSE) #a control does not always need to be specified.
d$FUN <- function(x, ...) tryCatch(d$comp_function(x, ...), error =
function(x) data.frame(effect_size = NA, lwr = NA, upr = NA))
d$conf.int <- conf.int
d$pool_variance <- pool_variance
} else comparisons <- NULL
#warning about the importance of ordering treatment variable. only if mcc and other conditions
#if (!is.null(comp_groups) & !is.null(d$levels) &
#    class(d_f[["x"]])[1] != "ordered")
#  warning("treatment is not an ordered factor.")
summaries <- treatment_summaries(d_f, d)
g <- c("response", d$panel, d$times)
cmat <- unique(d_f[g])
h <- names(d$comparisons)
cmat <- data.frame(cmat[rep(row.names(cmat),
ea = length(h)), ,drop = FALSE], comparison = ordered(h, levels = h))
#split
fnames <- setdiff(g, d$pool_variance)
ffac <- tidyr::unite(d_f[rev(fnames)])[[1]]
ffac <- factor(ffac, levels = unique(ffac))
d_f_split_list <- split(d_f, ffac)
dfcf = d_f_split_list[[1]]
dfcf
cmat
fixed <- as.formula(paste("y ~", paste(c("x", gvars), collapse = "*")))
if (!is.null(d$block)) random <- as.formula(paste("~ 1 |", d$block))
if (d$contrasts == "allcomps") co <- "revpairwise" else
if (d$contrasts == "mcc") co <- "trt.vs.ctrl"
if (length(gvars) > 0) contrasts <- as.formula(paste(co, "~x|",
paste(gvars, collapse = "+"))) else
contrasts <- as.formula(paste(co, "~x"))
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint
co <- "revpairwise"
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
if (length(gvars) > 0) contrasts <- as.formula(paste(co, "~x|",
paste(gvars, collapse = "+"))) else
contrasts <- as.formula(paste(co, "~x"))
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
treateffect(ex1, resp_var1 ~ treat_var1, comp_function = welchCI)
treateffect(ex1, resp_var1 ~ pred_var1, comp_function = welchCI)
cmat
co <- "trt.vs.ctrl"
d$comp_function <- mcc
if (length(gvars) > 0) contrasts <- as.formula(paste(co, "~x|",
paste(gvars, collapse = "+"))) else
contrasts <- as.formula(paste(co, "~x"))
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
cmat
g <- c("response", d$panel, d$times)
cmat <- unique(d_f[g])
h <- names(d$comparisons)
cmat <- data.frame(cmat[rep(row.names(cmat),
ea = length(h)), ,drop = FALSE], comparison = ordered(h, levels = h))
#split
fnames <- setdiff(g, d$pool_variance)
ffac <- tidyr::unite(d_f[rev(fnames)])[[1]]
ffac <- factor(ffac, levels = unique(ffac))
d_f_split_list <- split(d_f, ffac)
cmat
cmat
cmat <- unique(d_f[g])
d_f[g]
g <- c("response", d$panel, d$times)
cmat <- unique(d_f[g])
h <- names(d$comparisons)
cmat <- data.frame(cmat[rep(row.names(cmat),
ea = length(h)), ,drop = FALSE], comparison = ordered(h, levels = h))
cmat
d <- list(response = re, treatment = tr, times = times,
block = block)
if (!is.null(lpf$condition)) d$panel <- names(lpf$condition)
d$levels <- lapply(tr, function(j) levels(factor(ddl$x[ddl$treatment == j])))
names(d$levels) <- tr
if (is.null(control)) d$control <- lapply(d$levels, `[[`, 1) else #maybe a warning if you specify a level that's not in the treatment variable
d$control <- as.list(control)
names(d$control) <- tr
d$summary_functions <- summary_functions
d$comp_function <- comp_function
d$comp_function_name <- deparse(substitute(comp_function))
d$contrasts <- deparse(substitute(comp_groups))
if (any(unlist(lapply(d$levels, function(x) length(x) == 1)))) {
warning("no comparisons done because only one level in treatment")
comparisons <- NULL
} else if (!is.null(comp_groups) & !is.null(d$levels)) {
d$comparisons <-
lapply(tr, function(x) define_comparisons(comp_groups(d$levels[[x]],
d$control[[x]]))) %>% unlist(., recursive = FALSE) #a control does not always need to be specified.
d$FUN <- function(x, ...) tryCatch(d$comp_function(x, ...), error =
function(x) data.frame(effect_size = NA, lwr = NA, upr = NA))
d$conf.int <- conf.int
d$pool_variance <- pool_variance
} else comparisons <- NULL
g <- c("response", d$panel, d$times)
cmat <- unique(d_f[g])
h <- names(d$comparisons)
cmat <- data.frame(cmat[rep(row.names(cmat),
ea = length(h)), ,drop = FALSE], comparison = ordered(h, levels = h))
cmat
comp_groups = mcc
ddl <- list(response = rep(re, length(tr), ea = N),
treatment = rep(tr, ea = N * length(re)))
if (!is.null(lpf$condition)) ddl <- c(ddl, lapply(lpf$condition, as.factor))
if (!is.null(times)) ddl[[times]] <- rep(data[[times]], length(re) * length(tr))
if (!is.null(block)) ddl[[block]] <- rep(data[[block]], length(re) * length(tr))
ddl$y <- lpf$left
ddl$x <- if(!is.factor(lpf$right)) factor(lpf$right) else lpf$right
d_f <- data.frame(ddl)
#averaging across subsamples
if (average_subsamples) d_f <- d_f %>%
group_by_at(setdiff(names(d_f), c("y"))) %>%
summarise(subsamples = n(), y = mean(y, na.rm = T)) %>%
ungroup
#create design list object defining the experimental design
d <- list(response = re, treatment = tr, times = times,
block = block)
if (!is.null(lpf$condition)) d$panel <- names(lpf$condition)
d$levels <- lapply(tr, function(j) levels(factor(ddl$x[ddl$treatment == j])))
names(d$levels) <- tr
if (is.null(control)) d$control <- lapply(d$levels, `[[`, 1) else #maybe a warning if you specify a level that's not in the treatment variable
d$control <- as.list(control)
names(d$control) <- tr
d$summary_functions <- summary_functions
d$comp_function <- comp_function
d$comp_function_name <- deparse(substitute(comp_function))
d$contrasts <- deparse(substitute(comp_groups))
if (any(unlist(lapply(d$levels, function(x) length(x) == 1)))) {
warning("no comparisons done because only one level in treatment")
comparisons <- NULL
} else if (!is.null(comp_groups) & !is.null(d$levels)) {
d$comparisons <-
lapply(tr, function(x) define_comparisons(comp_groups(d$levels[[x]],
d$control[[x]]))) %>% unlist(., recursive = FALSE) #a control does not always need to be specified.
d$FUN <- function(x, ...) tryCatch(d$comp_function(x, ...), error =
function(x) data.frame(effect_size = NA, lwr = NA, upr = NA))
d$conf.int <- conf.int
d$pool_variance <- pool_variance
} else comparisons <- NULL
g <- c("response", d$panel, d$times)
cmat <- unique(d_f[g])
h <- names(d$comparisons)
cmat <- data.frame(cmat[rep(row.names(cmat),
ea = length(h)), ,drop = FALSE], comparison = ordered(h, levels = h))
cmat
ex1
lm(fixed, data = dfcf) %>%
emmeans(contrasts) %>%
confint %>%
`$`(contrasts) %>%
tbl_df %>%
transmute(effect_size = estimate, lwr = lower.CL, upr = upper.CL)
cmat
library(treateffect)
ex1 <- tedatasim(n = 10, response = 1, levels = 3, time = 1,
groups = 1, subsample = 1, block = FALSE)
ex1.te <- treateffect(ex1, resp_var1 ~ pred_var1)
ex1.te
plot(ex1.te)
plotdiff(ex1.te)
ex2 <- tedatasim(n = 10, response = 2, levels = 2, time = 1,
groups = 1, subsample = 1, block = FALSE)
ex2 <- tedatasim(n = 10, response = 2, levels = 2, time = 1,
groups = 1, subsample = 1, block = FALSE)
ex2.te <- treateffect(ex2, resp_var1 + resp_var2 ~ pred_var1)
ex2.te
ex2.te <- treateffect(ex2, resp_var1 + resp_var2 ~ pred_var1, comp_function = welchCI)
ex2.te
ex3 <- tedatasim(n = 3, response = 1, levels = c(2,2), time = 1,
groups = 1, subsample = 1, block = FALSE)
ex3.te <- treateffect(ex3, resp_var1 ~ pred_var1 + pred_var2)
ex3.te
plot(ex3.te)
ex1
ex1.te
ex1.te <- treateffect(ex1, resp_var1 ~ pred_var1, pool_variance = "pred_var1")
ex1.te
plotdiff(ex1.te)
ex1.te <- treateffect(ex1, resp_var1 ~ pred_var1)
plotdiff(ex1.te)
ex4.te <- tedatasim(n = 10, response = 1, levels = 1, time = 1,
groups = 1, subsample = 1, block = FALSE) %>%
treateffect(resp_var1 ~ pred_var1)
ex4.te
plot(ex4.te)
ex5 <- tedatasim(n = 5, response = 1, levels = 1, time = 3,
groups = 1, subsample = 1, block = FALSE)
ex5.te <- treateffect(ex5, resp_var1 ~ pred_var1, times = "time_var")
ex5.te
plot(ex5.te)
ex6 <- tedatasim(n = 5, response = 1, levels = 2, time = 10,
groups = 1, subsample = 1, block = FALSE)
ex6.te <- treateffect(ex6, resp_var1 ~ pred_var1, times = "time_var")
ex6.te
plot(ex6.te, dodge = 0.3)
ex7 <- tedatasim(n = 10, response = 1, levels = 2, time = 30,
groups = 3, subsample = 1, block = FALSE)
ex7.te <- treateffect(ex7, resp_var1 ~ pred_var1 | group_var1, times = "time_var")
ex7.te
plot(ex7.te, panel_formula = group_var1 ~ .)
wb.te <- treateffect(warpbreaks, breaks ~
interaction(wool, tension), comp_groups = allcomps)
wb.te
plot(wb.te)
?treateffect
NSE_7mo
treateffect(NSE_7mo, NSE_7mo ~ treatment | year, block = "block")
treateffect(NSE_7mo, NSE_7mo ~ treatment | year, block = "block") %>% plotdiff
treateffect(NSE_7mo, NSE_7mo ~ treatment | year, block = "block", comp_groups = mcc) %>% plotdiff
str(NSE_7mo)
treateffect(NSE_7mo, NSE_7mo ~ treatment | year, block = "block") %>% plot
ysr_N.te <- ysr_N %>%
treateffect(net_mineralization + net_nitrification ~ treatment | date,
average_subsamples = TRUE, block = "block")
plot(ysr_N.te)
ysr_N.te
ml.te <- treateffect(ml, nh4 ~ treatment | tussock + year, time = "doy",
comp_groups = mcc, comp_function = bootdiff_bca)
ml.te <- treateffect(ml, nh4 ~ treatment | tussock + year, time = "doy",
comp_groups = mcc)
plot(ml.te)
ml.te
str(ml)
ml$treatment <- ordered(ml$treatment, c("C.N", "C.N", "A.N", "A.O"))
ml$treatment <- ordered(ml$treatment, c("C.N", "C.O", "A.N", "A.O"))
ml.te <- treateffect(ml, nh4 ~ treatment | tussock + year, time = "doy",
comp_groups = mcc)
ml.te
ml.te <- treateffect(ml, nh4 ~ treatment | tussock + year, time = "doy",
comp_groups = mcc, block = "block")
ml.te
ex10 <- tedatasim(n = 5, levels = 3, groups = 2)
ex10
treateffect(ex10, resp_var1 ~ pred_var1 | group_vars)
treateffect(ex10, resp_var1 ~ pred_var1 | group_var)
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1)
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1, pool_variance = c("pred_var1"))
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1, pool_variance = c("pred_var1", "group_var1"))
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1, pool_variance = c("pred_var1", "group_var1")) %>% plotdiff
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1, pool_variance = c("pred_var1")) %>% plotdiff
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1) %>% plotdiff
ex1
dfcf
d$levels
d$panel
plotdiff(ml.te)
d$pool_variance
library(treateffect)
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1)
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1, pool_variance = "pred_var1")
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1, pool_variance = c("pred_var1", "group_var1"))
print.te <- function(x) {
cat(paste("Response variable(s):", x$design$response), "\n\n")
cat("Treatment summaries:", "\n")
try(print(x$summaries), silent = TRUE)
if(!is.null(x$design$comparisons)) {
cat("\n\n", "Treatment comparisons: ", x$design$comp_function_name, "\n", sep = '')
if (!is.null(x$design$pool_variance)) cat("Variance pooled by: ",
paste(x$design$pool_variance, sep = ", "), "\n", sep = '')
try(print(x$comparisons), silent = TRUE)}}
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1, pool_variance = c("pred_var1", "group_var1"))
rm(print.te)
library(treateffect)
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1, pool_variance = c("pred_var1", "group_var1"))
library(treateffect)
treateffect(ex10, resp_var1 ~ pred_var1 | group_var1, pool_variance = c("pred_var1", "group_var1"))
library(treateffect)
knitr::opts_chunk$set(echo = FALSE, results = 'hide', message = FALSE, warning = FALSE)
library(treateffect)
library(lubridate)
library(readr)
library(readxl)
library(nlme)
library(emmeans)
doec <- c("black","red","blue","purple")
acimp0607 <- read_csv("acimp0607.csv")
acimp13 <- read_csv("acimp13.csv")
acimp14 <- read_csv("acimp14.csv")
acimp_all <- full_join(acimp0607, full_join(acimp13, acimp14)) %>%
select(-contains("before"), -contains("after"))
theme_te()
cover <- read_excel("biocrust cover.xlsx")
cover
treateffect(mutate(cover, Treatment = treatment),
`Light cyano` + `Dark cyano` + Lichen + Moss ~ year | Treatment,
block = "block")$comparisons
treateffect(mutate(cover, Treatment = treatment),
`Light cyano` + `Dark cyano` + Lichen + Moss ~ year | Treatment,
block = "block") %>% plot
ex1
library(treateffect)
t.test(ex1$resp_var1[ex1$pred_var1 == "d"], ex1$resp_var1[ex1$pred_var1 == "c"])
treateffec(ex1, resp_var1 ~ pred_var1)
treateffect(ex1, resp_var1 ~ pred_var1)
library(treateffect)
treateffect(ex1, resp_var1 ~ pred_var1)
treateffect(ex1, resp_var1 ~ pred_var1, pool_variance = "pred_var")
treateffect(ex1, resp_var1 ~ pred_var1, pool_variance = "pred_var1")
mydata <- read.csv(file.choose())
?file.choose
k <- read.delim("clipboard")
k
k <- read.delim("clipboard")
k
k <- read.delim("clipboard")
k
devtools::install_github("treateffect/anthonydn")
devtools::install_github(treateffect/anthonydn)
devtools::install_github("anthonydn/treateffect")
library(treateffect)
names(k)
treateffect(weight + systolic + diastolic + bpm ~ "x", times = "date")
treateffect(k, weight + systolic + diastolic + bpm ~ "x", times = "date")
str(k)
treateffect(k, weight + systolic + diastolic + bpm ~ "x", times = "date") %>% plot
k$date <- as.Date(k$date)
treateffect(k, weight + systolic + diastolic + bpm ~ "x", times = "date") %>% plot
k <- read.delim("clipboard")
k$date <- as.Date(k$date)
k <- read.delim("clipboard")
treateffect(filter(k, year(date) >2015), weight + systolic + diastolic + bpm ~ "x", times = "date") %>% plot
library(lubridate)
treateffect(filter(k, year(date) >2015), weight + systolic + diastolic + bpm ~ "x", times = "date") %>% plot
k$date <- as.Date(k$date)
treateffect(filter(k, year(date) >2015), weight + systolic + diastolic + bpm ~ "x", times = "date") %>% plot
k <- read.delim("clipboard")
k$date <- as.Date(k$date)
treateffect(filter(k, year(date) >2015), weight + systolic + diastolic + bpm ~ "x", times = "date") %>% plot
splom(k)
library(Amisc)
library(lattice)
splom(k)
splom(k[c(2,3,5),])
splom(k[,c(2,3,5)])
densityplot(k$diastolic)
treateffect(filter(k, year(date) >2015), weight + systolic + diastolic + bpm ~ "x", times = "date") %>% plot
k <- read.delim("clipboard")
k$date <- as.Date(k$date)
treateffect(filter(k, year(date) >2015), weight + systolic + diastolic + bpm ~ "x", times = "date") %>% plot
densityplot(k$diastolicbpm)
densityplot(k$bpm)
splom(k[,c(2:5)])
treateffect(filter(k, year(date) >2015), weight + systolic + diastolic + bpm ~ "x", times = "date") %>% plot
treateffect(filter(k, year(date) >2015, systolic < 150), weight + systolic + diastolic + bpm ~ "x", times = "date") %>% plot
73398/71434
library(treateffect)
